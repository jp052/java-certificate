###Fragen###
weiter bei Zeile 117

Was ist der Unterschied zwischen deklarieren, initialisieren und instanziieren?
A: Deklarieren = Variable definieren (String s oder int number)
Initialisierung = Wert zuweisen (String s = "s" oder int number = 1)
Instanziieren = Neues Objekt erzeugen mit new (new Object())


Welche zeichen darf eine Klasse enthalten?
A: Wie methode, auch ein Zeichen ist möglich

Wann wird eine hidden Methode aufgerufen?
A: Es wird immer die vom Referenztyp aufgerufen.

was passiert wenn main den falschen return typ hat?
A: Ein Error zur Laufzeit wird geworfen.

Was bedeutet invariant?
A: unveränderlich

Können lokale Variablen in einer if bedingung initialisiert werden?
A: Nein, da der compiler keine Bedingung auswertet, die Variablen sind daher nicht initialisert.

Wo können continue verwendet werden?
A: while, do, for Schleife

Kann einer float Variable ohne Probleme ein int zugewiesen werden?
A: Nicht ohne Probleme, es kann einen Präzisionsverlust geben. Es gibt keinen compilation Fehler, lediglich während der Laufzeit können unerwartete Probleme auftreten.

Ist folgendes erlaubt? if(false) ; else ;
A: Ja, if else ohne Code und Klammer

Welche primitiven Datentypen können gegenseitig zugewiesen werden, welche Bedingungen gibt es?
A: byte, char, short, int haben sogenanntes implicit narrowing. Werte können nur gegenseitig zugwiesen werden wenn der Wert passt.
Bsp: Ok: final short s = 1; byte b = s;  Nicht Ok: final short s = 200; byte b = s;

Funktioniert folgendes? short s = 1; byte b = s; 
Nein, da short keine constante ist. Folgendes geht: final short s = 1; byte b = s;

Wie nennet man Exception und RuntimeException noch?
A:checked Exceptions (Exception und subclasses) und unchecked Exceptions (RuntimeException und sub classes)

Wo kann das final keyword verwendet werden?
A: class, variable, method

Was bedeutet final keyword bei einer Klasse/Methode/Variable?
A: Es kann keine Subklasse von einer final Klasse erstellt werden. 
Eine Methode kann nicht overridden, sondern nur hidden werden.
Eine Variable ist mit final eine Konstante.

Kann synchronized auf eine Klasse angewendet werden?
A: Nein

Welche Variablentypen können in switch nicht als label verwendet werden?
A: boolean, long, float, double

Kann die main methode throws Exception deklarieren?
A: Ja, jede Methode darf das.

Was passiert genau wenn eine RuntimeException nicht gefangen wird?
A:  The exception will propagate up the method invocation stack until some method handles it. If no one handles it then the exception will be handled by the JVM 
and the JVM will terminated that thread.

Was tut der ~ Operator?
A: Invertiert alle  bits. Also von z.B 0 auf 1.

Was sind integral types?
A: byte, short, int, long, char. Das sind alles Datentypen welche von int erstellt werden können.

Was passiert, wenn vor ein negatives int nochmal ein negatives Vorzeichen gesetzt wird?
A: Der Wert bleibt gleich, da intern erst alles invertiert wird und dann eins hochgezählt. 

Gibt es %= Operator?
A: Ja

Was ist der TemporalAccessor in der Java 8 Date API?
A: Das gemeinsame Interface von LocalDate, LocalTime und LocalDateTime. Nur Read Only Zugriff möglich.

Kann auf einen protected member in einer Superklasse zugegriffen werden, 
wenn ein neues Objekt mit einer Referenz vom Typ der Superklasse innerhalbt der Subklasse erzeugt wird?
A: Nein. Das ist eine Trick Question. Es erscheint als könnte man aufgrund der Vererbung auf die Superklasse zugreifen, geht aber nicht.

Welche Klassen sind final, was bedeutet das?
A: String, StringBuffer and StringBuilder are also final. All Primitive wrappers are also final (i.e. Boolean, Integer, Byte etc).
java.lang.System is also final. Final classes cannot be extended.

Welche Klassen sind immutable?
A: String, alle primitive Wrapper, Locale, Enums(in der Regel) 

Was sind die Regeln für narrowing primitive types?
A:
1. The expression is a compile time constant expression of type byte, char, short, or int.
2. The type of the variable is byte, short, or char.
3. The value of the expression (which is known at compile time, because it is a constant expression) is representable in the type of the variable.

kann narrowing conversion auf long oder double angewendet werden?
A: Nein. char ch = 30L funktioniert nicht!

Wie ist die initalisierungsreihenfolge einer Klasse?
A:
First, static statements/blocks are called IN THE ORDER they are defined.
Next, instance initializer statements and blocks are called IN THE ORDER they are defined.

Ist folgendes erlaubt? long m = new Long("123");
A: Ja, aus string kann Long erstellt werden, Long wird per autoboxing zu long konvertiert.

Ist new Long() erlaubt?
A: Nein, es gibt kein wrapper ohne no-arg constructor

Wie parst man einen String in einen Wrapper?
A: new Long("213"); oder Long.parseLong("2343"); oder Long.valueOf("123").longValue();

Wann ist int a = b = c = 100 gültig?
A: wenn b und c vorher deklariert wurde. Es wird von rechts nach links zugewiesen, als erst c= 100, dann b = c, dann a = b.

Darf Sting s = this.toString(); als Initialisierung für Instanzvariablen verwendet werden?
A: Ja, es wird Object.toString() aufgerufen.

Nenne 6 Fakten/Regel zu Strings.
A:
These are the six facts on Strings:
1. Literal strings within the same class in the same package represent references to the same String object. 
2. Literal strings within different classes in the same package represent references to the same String object. 
3. Literal strings within different classes in different packages likewise represent references to the same String object. 
4. Strings computed by constant expressions are computed at compile time and then treated as if they were literals. 
5. Strings computed at run time are newly created and therefore are distinct. (So line 4 prints false.)
6. The result of explicitly interning a computed string is the same string as any pre-existing literal string with the same contents. (So line 5 prints true.)
We advise you to read section 3.10.5 String Literals in Java Language Specification.

Checked oder unchecked Exception? java.lang.SecurityException und java.lang.CloneNotSupportedException
A: SecurityException = Unchecked (Runtime), CloneNotSupportedException = Checked (Exception)

was verursacht break und continue in einer for-loop?
A: continue springt zum beginn der schleife und für den nächsten durchlauf aus. break bricht die schleife komplett ab.

Wie funktioniert String.indexOf Methode?
A: string.indexOf(String str) : gibt den index des erstem match zurück, bei keinem match -1
string.indexOf(String str, int fromIndex) : gibt den index des erstem match zurück, aber fängt erst ab dem definierten fromIndex an.

Nenne wichtige final classes, was bedeutet das?
A: String, StringBuilder, StringBuffer, alle Wrapper außer java.lang.Number, java.lang.System.
-> Von final Klassen kann nicht geerbt werden.

Ist das gültig? String[] sA = new String[1] { "aaa"};
A: Nein, da die größe nicht angegeben werden kann, wenn in der gleichen Zeile initialisiert wird in welcher das Array auch deklariert wird.

Ist eine Variable in einem switch-statment, die in einem case deklariert wurde, in einem anderen case noch in scope?
Ja. 

welche Zahlenwerte kann byte abbilden?
-128 bis 127, weil die 0 bei den Positiven Zahlen dabei ist. Es werden nur 7 bit verwendet, da das 8 für die Vorzeichen verwendet wird.

Auf was prüfen wrapper klassen equals?
A: objekt Gleichheit, es gibt keine spezielle Implmenierung z.B für Vergleich von Integer und Long.

Welche String methoden gibt es?
A: equals(Object), equalsIngoreCase(String), intern()
TODO: vervollständigen
 
Kann eine abstract classe eine main methode beinhalten?
A: ja es ist eine normale methode.

Kann eine abstract class compiliert und ausgeführt werden?
A: Ja, wenn es eine main methode gibt.

Kann StringBuffer Wert ohne toString in println ausgegeben werden?
A: Ja nur wenn zusätzlich ein String mit dem + Operator hinzugefügt wird. Dann wird automatisch toString aufgerufen. z.b System.out.println("val: " + stringBuffer)

Nenne Regel für Switch statement!
A:
Here are the rules for a switch statement:
1. Only String, byte, char, short, int, (and their wrapper classes Byte, Character, Short, and Integer), and enums can be used as types of a switch variable. (String is allowed only since Java 7). 
2. The case constants must be assignable to the switch variable. For example, if your switch variable is of class String, your case labels must use Strings as well.
3. The switch variable must be big enough to hold all the case constants. For example, if the switch variable is of type char, then none of the case constants can be greater than 65535 because a char's range is from 0 to 65535.
4.  All case labels should be COMPILE TIME CONSTANTS.
5. No two of the case constant expressions associated with a switch statement may have the same value.
6. At most one default label may be associated with the same switch statement.

Ist das legal? int a[ ][ ] = new int [ ][4] ; int[ ] a[ ] = new int[4][ ] ;
A: 1. ist nicht legal, da dimensionen von links nach rechts erstellt werden müssen.

Wie verhalten sich String und StringBuilder methoden mit start und end index?
A:

Können primitive Wrapper mit arithmetischen mitteln verrechnet werden?
A: Ja

Kann einem String Variable ein char zugewiesen werden?
A: nein, nur wenn mindestens 1 string angehängt wird: String s = 'a' + "";

gibt es das Keyword unsigned?
A: nein

Wie wandelt man einen Primitiv Wrapper in primitiv um und anders herum?
A: Wrapper to Primitive: WrapperName.parseWrapperName("valueString"); z.B Boolean.parseBoolean("true")
Primitive to Wrapper: WrapperName.valueOf(true); z.B Boolean.valueOf(true) oder Boolean.valueOf("true")

Welchen Datentype erwartet eine while-Schleife?
A: boolean oder Boolean

Was passiert bei doppelten minuszeichen, verhält es sich wie in normalen Mathematik? z.B (-3) - (-5)
A: Ja verhält sich ganz normal. (-3) - (-5) = 2

Was ergibt byte i = -128; i--; ?
A: 127

Ist folgendes erlaubt? i = -128; i = i-1; ?
A: Nein

was ist das maximum und minimum von byte?
A: 127 bis -128

Kann switch long und boolean als switch-value verwenden?
A: nein

Kann ein Primitiver Datentype mit einem Wrapper so verglichen werden primitiveInt == wrapperInt
A: Ja, Wrapper wir autoboxed, da ein primitiver type vorhanden ist.

Gibt es object.getClass().isArray()?
A: Ja, für Arrays returned die Methode true.

Welche Exception wird von instance und static block initializer geworfen?
A: Immer ExceptionInInitializerError, egal welche exception geworfen wurde.

Welche Exception Art kann im instance oder static lock initializer geworfen werden?
A: nur runtime/unchecked exceptions.

Wann kann man ein Objekt einer superklasse in eine subklasse casten?
A: Wenn das Suerklassenobjekt zur Laufzeit eine Instanz der Subklasse enthält.

Was sind die Regeln für Label?
A: siehe OCA Buch

Kann eine statische Methode/Variable über ein null Referenz aufgerufen werden?
A: Ja

Wann muss eine Exception einer superklasse geworfen werden, anhand was wird das fest gestellt?
A: Es hängt immer an der Exception Defintionen vom Type der Referenz. Der Compiler erkennt nicht ob zur Laufzeit eine Kindklasse ohne Exception List vorhanden ist.

Welche primitiven typen können sich gegenseitig zugewiesen werden?
A: suchenin OCA Buch.

Kann eine satische variable/methode mit this aufgerufen werden?
A: Nicht aus der main methode, (Herausfinen: ist es aus einer anderen möglich?)

Wann muss this. keyword explizit gesetzt werden?
A:

dürfen overriden methoden mit primitiven return tpyes auch promotion fähige zurückgeben?
A: nein, overridden methoden mit primitiven datentypen, müssen immer den gleichen datentype zurückgeben.

Darf nach einem Exception finally block ein catch block kommen?
A: nein

Nenne Exception Syntax-Regeln:
A: 
Syntax of try/catch/finally is:

try{
}
catch(Exception1 e) {... }
catch(Exception2 e) {... }
...
catch(ExceptionN e) {... }
finally { ...  }

With a try, either a catch and or finally or both can occur. 
A try MUST be followed by at least one catch or finally. (Unless it is a try with resources statement, which is not in scope for this exam.)

In Java 7, you can collapse the catch blocks into a single one: 

try {     
  ...
} 
catch (SQLException | IOException | RuntimeException e) {     
  //In this block, the class of the actual exception object will be whatever exception is thrown at runtime.
  //But the class of the reference e will be the closest common super class of all the exceptions in the catch block.
  //In this case, it will be java.lang.Exception because that is the most specific class that is a super class for all the three exceptions.
  e.printStackTrace(); 
} 

Was bewirkt return; in einem catch  block?
A:

Welche Exceptions müssen beim Überschreiben einer Methode angegben werden?
A: Es müssen immer eine Liste mit Sub-Exceptions angebene werden. (wie auch beim Return-Type)
Außnahme: Keine Exception ist auch erlaubt (Leere liste von exceptions)

Kann instanceof verwendet werden, wenn die getetste instanz keine beziehung in der Vererbungshierarchie oder Interface hat?
A: Bei Vererbung erkennt der compiler das und wirft einen Fehler.
Bei Interface implementierung erennt der compiler das nur, wenn die Klasse der zu vergleichenden Referenz final ist.

Wo beginnt und endet der Index bei String.substring(1,5)?
start index inclusive, end index exclusive.

Regeln um lambda syntax zu validieren:
A: 
There is a simple trick to identify invalid lambda constructs. When you write a lambda expression for a functional interface, you are essentially providing an implementation of the method declared in that interface but in a very concise manner.  Therefore, the lambda expression code that you write must contain all the pieces of the regular method code except the ones that the compiler can easily figure out on its own such as the parameter types, return keyword, and brackets. So, in a lambda expression, just check that all the information is there and that the expression follows the basic syntax - 

(parameter list) OR single_variable_without_type -> { regular lines of code } OR just_an_expression_without_semicolon

For a complete discussion on this topic please see this short tutorial - http://enthuware.com/index.php/home/115

Muss man beim Predicate für lambda den Datentype per generics bekannt geben?
A: Ja

Wie erkennt man welcher Return Type eine numerische Berechnung hat? 
immer den der größt benötigte in einer Konstanten oder dem Datentype der variable.
Es kann aber immer nur int, long, float oder double sein.
http://enthuware.com/forum/viewtopic.php?f=2&t=1800&p=4831&hilit=never#p4831

Welche außnahme gibt es für if-Bedingung, wenn if(false) verwendet wird?
A: Es ist möglich Variable ohne compilerfehler zuzuweisen, obwohl der code unreachable ist. Bei z.B while oder for geht das nicht.
Grund ist, dass der compiler solge statements automatisch entfernt zur optimierung für Productivcode mit if(DEBUG) mit DEBUG = false.

In welcher Reihenfolge wird int i = 0; iA[i] = i = 30 ; verarbeitet?
A: Es wird zuerst der Wert auf der linken Seite verarbeitet. iA[i] = i = 30; => iA[0] = i = 30 ;  =>  i = 30; iA[0] = i ; =>   iA[0] = 30 ;

Wie weit ist der scope von Labels?
A: Nur innerhalb des folgende Codeblocks. Wenn es kein geschweiften Klammern gibt, nur im nächsten Statement.

Boolean Wrapper Regeln?
A:
You need to remember the following points about Boolean:

1. Boolean class has two constructors - Boolean(String) and Boolean(boolean)
The String constructor allocates a Boolean object representing the value true if the string argument is not null and is equal, ignoring case, to the string "true". Otherwise, allocate a Boolean object representing the value false. Examples: new Boolean("True") produces a Boolean object that represents true. new Boolean("yes") produces a Boolean object that represents false.

The boolean constructor is self explanatory.

2. Boolean class has two static helper methods for creating booleans - parseBoolean and valueOf.
Boolean.parseBoolean(String ) method returns a primitive boolean and not a Boolean object (Note - Same is with the case with other parseXXX methods such as Integer.parseInt - they return primitives and not objects). The boolean returned represents the value true if the string argument is not null and is equal, ignoring case, to the string "true". 

Boolean.valueOf(String ) and its overloaded Boolean.valueOf(boolean ) version, on the other hand, work similarly but return a reference to either Boolean.TRUE or Boolean.FALSE wrapper objects. Observe that they dont create a new Boolean object but just return the static constants TRUE or FALSE defined in Boolean class.

3. When you use the equality operator ( == ) with booleans, if exactly one of the operands is a Boolean wrapper, it is first unboxed into a boolean primitive and then the two are compared (JLS 15.21.2). If both are Boolean wrappers, then their references are compared just like in the case of other objects. Thus, new Boolean("true") == new Boolean("true") is false, but new Boolean("true") == Boolean.parseBoolean("true") is true.

Ist das final Keyword in einer for-loop erlaubt? (for(final Object o2 :c){ })
A: Ja

Was gibt getClass auf ein Objekt zurück? z.B List<String> list = new ArrayList<>(); list.getClass();
A: Egal um welche Referenz es sich handelt, wird immer die Klasse vom Typ des aktuellen Objekt zurück gegeben. hier: class java.util.ArrayList

Können Felder/statische Variablen in Interfaces mit dem gleichen Namen in mehreren Interfaces vorhanden sein?
A: Ja. Es darf nur nicht mehrdeutig darauf zugegriffen werden, es muss vorher gecasted werden.

Was für ein datentyp ist 43e1?
A: double

Wie ist das ISO Datums und Zeitformat?
A: yyy-mm-dd z.B. 2011-12-03  und yyy-mm-ddThh:mm:ss z.B. 2011-12-03T10:15:30

Was sind die Eigenschaften des args Array in der main methode?
A: Der args Array ist niemals null, sondern hat bei keinem Argument die Länge 0.

Erläuterung zu String conversion!
A: Gilt für String Variablen und System.out.println
Andere Datentypen können immer nur zu String konvertiert werden, wenn auch ein String vorkommt im Ausdruck. z.B. String b = "" + true; //ist ok
Auch wenn eine Methode mit dem Rückgabetyp String einen null Wert zurück gibt, reicht der Typ zur konvertierung. Nur null würde jedoch nicht funktioniernen. String s = null + true //not ok
Beschreibung:
If one operand expression is of type String, then string conversion is performed on the other operand to produce a String at run time. The result is a reference to a newly created String object that is the concatenation of the two Strings. The characters of the left-hand operand precede the characters of the right-hand operand in the newly created string.
Any type may be converted to type String by string conversion.
A value x of primitive type T is first converted to a reference value as if by giving it as an argument to an appropriate class instance creation expression e.g. if T is boolean, then use new Boolean(x) .
toString() is defined by the primordial class Object; many classes override it, notably Boolean, Character, Integer, Long, Float, Double, and String.

Note that had there been a method like String getString() { return null; }, println( getString() + true ) etc. would have compiled fine and would have printed "nulltrue".

Nenne StringBuilder API!
A:

Nenne String API!
A:

In welcher Reihenfolge wird int k = 1; k += (k = 4) * (k + 2); evaluiert?
A: Zuerst wird der Wert vom compound operator += verwendet, dann wird k=4 zugwiesen und dann erst k+2 gerechnet, dh. k+2 wird 4+2.

Nenne die definition von Exceptions!
A: 
There are multiple view points regarding checked and and unchecked exceptions. As per the official Java tutorial ( http://docs.oracle.com/javase/tutorial/essential/exceptions/runtime.html ) :  If a client can reasonably be expected to recover from an exception, make it a checked exception. If a client cannot do anything to recover from the exception, make it an unchecked exception.
Here, the client basically means the caller of a method.

Another way to look at exceptions is to see the cause of the exception in terms of whether it is internal or external to the program's code. For example, an incorrectly written code may try to access a reference pointing to null, or it may try to access an array beyond its length. These are internal sources of exception. Here, using runtime exceptions is appropriate because ideally these problems should be identified while testing and should not occur when the program is ready for deployment. 

On the other hand, a program interacting with files may not be able to do its job at all if a file is not available but it should anticipate this situation. This is an external source of an exception and has nothing to do with a program's code as such. It is therefore appropriate to use a checked exception here.

Ist folgendes erlaubt, was wäre das Ergebnis? System.out.println('b'+new Integer(63));
A: Ja, char wird zu int promoted und verrechnet. Ergebnis: 98 + 63 = 161